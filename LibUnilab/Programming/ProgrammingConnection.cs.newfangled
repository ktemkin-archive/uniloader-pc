using System;
using System.Runtime.InteropServices;

using LibUsbDotNet;
using LibUsbDotNet.LibUsb;
using LibUsbDotNet.Main;
using LibUsbDotNet.Info;
using LibUsbDotNet.WinUsb;
using MonoLibUsb;


namespace Unilab.Programming
{
	enum PageQualifier
	{
		First,
		Last,
		Normal
	}
	
	/// <summary>
	/// 	Lower-level API provider for Programmer connections.
	///		(Note the lack of checksums or CRCs; these are handled by the USB stack.)
	/// </summary>
	internal class ProgrammingConnection
	{	
		//TODO: These should be abstracted to a configuration XML.
		//(Afterwards they can be represented by a ReadOnly reference.)
		const int VID = 0x16D0;
		const int PID = 0x05A5;
		
		public static UsbDeviceFinder UnilabDevice = new UsbDeviceFinder(VID, PID);

        static ProgrammingConnection()
        {
            LibUsbDevice.ForceLibUsbWinBack = true;
        }

        public static Programmer.DeviceStatus devicePresent()
        {


            //TODO: use find
            foreach (UsbRegistry reg in LibUsbDevice.AllDevices)
            {
                //return true if the device has been located
                if (reg.Vid == VID && reg.Pid == PID)
                {
                    if (reg.IsAlive)
                        return Programmer.DeviceStatus.InUse;
                    else
                        return Programmer.DeviceStatus.Available;
                }
            }

            return Programmer.DeviceStatus.NotFound;
        }

		
		/// <summary>
		/// 	Connection the Unified Lab Kit device.
		/// </summary>
		//MonoUsbDeviceHandle device;
		//MonoUsbSessionHandle session;
        UsbDevice device;
		
		short timeout;
		
		
		/// <summary>
		/// 	Creates a new ProgrammingConnection; if the Unified Lab Kit can't be found, 
		/// 	it throws a DeviceNotConnected excpetion.
		/// </summary>	
		/// <param name="Timeout">
		/// 	The amount of time to wait before the system decides the device isn't connected.
		/// </param>
		public ProgrammingConnection (short timeout)
		{
            try
            {
                //Force usage of Libusb 1.0, rather than Libusb 0.1
                //LibUsbDevice.ForceLibUsbWinBack = true;

                /*

                //create a new local USB session
                session = new MonoUsbSessionHandle();

                //find the device by its descriptor
                device = MonoUsbApi.OpenDeviceWithVidPid(session, VID, PID);

                if (device == null)
                    throw new DeviceNotFoundException();

                //if the kernel has a driver operating on our interface, ask it to detach
                if (MonoUsbApi.KernelDriverActive(device, 0) >= 0)
                    if (MonoUsbApi.DetachKernelDriver(device, 0) < 0)
                        throw new DeviceInUseException();

                //claim our interface for exclusive access
                MonoUsbApi.ClaimInterface(device, 0);
                 * 
                 */

                //Attempt to open the device.
                device = UsbDevice.OpenUsbDevice(UnilabDevice);
                

                //If the device wasn't found, throw the relevant exception.
                if (device == null)
                    throw new DeviceNotFoundException(UsbDevice.LastErrorString);


                

            }
            catch (ObjectDisposedException)
            {
                throw new CommunicationErrorException();
            }
		}
		
		#region Public Methods
		

		public void Close()
		{
			//Release the interface and close the device.
			//device.ReleaseInterface(0);
			device.Close();
		}
		
		/// <summary>
		/// 	Writes a page to the AVR.
		/// </summary>
		/// <param name="address">
		/// 	The page address is the address of the page to be written; it must be aligned to the page size.
		/// </param>
		/// <param name="data">
		/// 	The 256 bytes (128 words) to write.
		/// </param>
		public void WriteAVRPage(int address, byte[] data)
		{
			byte[] packet = new byte[data.Length + 2];
			
			//convert the address to two bytes: the packet header
			packet[0] = (byte)(address & 0xFF);
			packet[1] = (byte)((address >> 8) & 0xFF);
				
			//copy the rest of the data in
			data.CopyTo(packet, 2);
			
			//and send the packet
			sendPacket(packet);
		}
		
		/// <summary>
		/// 	Sends a page of configuration data to the FPGA.
		/// </summary>
		/// <param name="page">
		/// 	The set of bytes to be sent to the FPGA.
		/// </param>
		/// <param name="qualifier">
		/// 	A qualifier determining if this is a special (first/last) pa
		/// </param>
		public void SendFPGAPage(byte[] page, PageQualifier qualifier)
		{
			byte[] packet;
			
			//prefix the data with the appropriate instruction code
			switch(qualifier)
			{
				case PageQualifier.First:	
					packet = prefixCommand(ProgrammerInstruction.FPGAConfigStart, page);
					break;
				
				case PageQualifier.Last:
					packet = prefixCommand(ProgrammerInstruction.FPGAConfigEnd, page);
					break;
				
				default:
					packet = prefixCommand(ProgrammerInstruction.FPGAConfigSend, page);
					break;
			}				
			
			//and send the packet to the device
			sendPacket(packet);
			
			//DEBUG
			//System.Threading.Thread.Sleep(10);
		}
		
		/// <summary>
		/// 	Writes a page to the MicroSD card.
		/// </summary>
		/// <param name="address">
		/// 	The address, on the SD card, to write to. Should be evenly divisible by 512.
		/// </param>
		/// <param name="data">
		/// 	The data to be written to the SD card. Should be <= 512 bytes.
		/// </param>
		public void WriteSDPage(uint address, byte[] data)
		{
			//This is a process that takes five commands:
			//First, each of four SD card buffers must be filled.
			//Then, a commit packet instructs the AVR to write the page to the SD card.
		}
		
		/// <summary>
		/// 	Resets the AVR device. In most cases, this will run the user program.
		/// </summary>
		public void ResetAVR(bool softReset)
		{
			byte[] packet;
			
			if(softReset)
				packet = prefixCommand(ProgrammerInstruction.SoftReset, null);
			else
				packet = prefixCommand(ProgrammerInstruction.HardReset, null);
			
			try
			{
				sendPacket(packet);
			}
			//CommunicationErrors are expected when we reset the device.
			catch(CommunicationErrorException) {}
		}
		
		/// <summary>
		/// 	Hard resets the AVR device.
		/// </summary>
		public void ResetAVR()
		{
			ResetAVR(false);	
		}
		
		
		#endregion
		
		#region Private Methods
		
		/// <summary>
		/// 	Sends a packet to the boot-loader. Typically contains 2 bytes of control and 256 bytes of payload.
		/// </summary>
		/// <param name="data">
		/// A <see cref="System.Byte[]"/>
		/// </param>
		private void sendPacket(byte[] packet)
		{
			//These 'magic numbers' are from the Teensy project, and match code in the UniLoader.
			const byte REQ_TYPE = 0x21;
			const byte REQ = 9;
			const short TRANSFER_VALUE = 0x200;
			const short TRANSFER_INDEX = 0;
			
			//send the packet as a control transfer [TODO: throw on error]
			//int retVal =  MonoUsbApi.ControlTransfer(device, REQ_TYPE, REQ, TRANSFER_VALUE, TRANSFER_INDEX, packet, (short)packet.Length, timeout);
            int retVal;

            //Allocate an unmanaged buffer for libusb communications, and copy our packet in.
            IntPtr buffer = Marshal.AllocHGlobal(Marshal.SizeOf(packet[0]) * packet.Length);
            Marshal.Copy(packet, 0, buffer, packet.Length);

            //Send the buffered packet via a control transfer.
            UsbSetupPacket setup = new UsbSetupPacket(REQ_TYPE, REQ, TRANSFER_VALUE, TRANSFER_INDEX, (short)packet.Length);
            device.ControlTransfer(ref setup, buffer, packet.Length, out retVal);
			
            //Throw a communications error if we failed to send.
			if(retVal < 0)
				throw new CommunicationErrorException();

            //TODO: throw a transfer incomplete error if our send ended prematurely.
		}
		
	
		/// <summary>
		/// 	Prefix a given command to the packet in question.
		/// </summary>
		/// <param name="instr">
		/// 	The instruction to be prefixed.
		/// </param>
		/// <param name="data">
		/// 	The data to which the instruction will be prefixed, or null to create an empty packet with a 128-byte null payload.
		/// </param>
		/// <returns>
		/// 	The fully formed packet.
		/// </returns>
		private byte[] prefixCommand(ProgrammerInstruction instr, byte[] data)
		{
			//Get the ushort code for the instruction.
			ushort instruction = (ushort)instr;
		
			//Create a new USB-HID packet.
			byte[] packet = new byte[130];
		
			//If we received a data packet, copy it in.
			if(data != null)
				data.CopyTo(packet, 2);
		
			//Copy in the instruction code
			packet[0] = (byte)(instruction & 0xFF);
			packet[1] = (byte)((instruction >> 8) & 0xFF);
		
			//return the completed packet
			return packet;
		}
		
		#endregion
	}
}

